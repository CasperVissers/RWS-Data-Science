
// This file was auto-generated by ML.NET Model Builder. 

using PumpMaintenanceModel_Prediction;

// Create single instance of sample data from first line of dataset for model input
PumpMaintenanceModel.ModelInput sampleData = new PumpMaintenanceModel.ModelInput()
{
    Id = 8776F,
    Amount_tsh = 0F,
    Funder = @"Grumeti",
    Gps_height = 1399F,
    Installer = @"GRUMETI",
    Longitude = 3.469876E+08F,
    Latitude = -2.147466E+08F,
    Wpt_name = @"Zahanati",
    Num_private = 0F,
    Basin = @"Lake Victoria",
    Subvillage = @"Nyamara",
    Region = @"Mara",
    Region_code = 20F,
    District_code = 2F,
    Lga = @"Serengeti",
    Ward = @"Natta",
    Population = 280F,
    Recorded_by = @"GeoData Consultants Ltd",
    Scheme_management = @"Other",
    Scheme_name = @"",
    Permit = true,
    Construction_year = 2010F,
    Extraction_type = @"gravity",
    Extraction_type_group = @"gravity",
    Extraction_type_class = @"gravity",
    Management = @"wug",
    Management_group = @"user-group",
    Payment = @"never pay",
    Payment_type = @"never pay",
    Water_quality = @"soft",
    Quality_group = @"good",
    Quantity = @"insufficient",
    Quantity_group = @"insufficient",
    Source = @"rainwater harvesting",
    Source_type = @"rainwater harvesting",
    Source_class = @"surface",
    Waterpoint_type = @"communal standpipe",
    Waterpoint_type_group = @"communal standpipe",
};

// Make a single prediction on the sample data and print results
var predictionResult = PumpMaintenanceModel.Predict(sampleData);

Console.WriteLine("Using model to make single prediction -- Comparing actual Status_group with predicted Status_group from sample data...\n\n");


Console.WriteLine($"Id: {8776F}");
Console.WriteLine($"Amount_tsh: {0F}");
Console.WriteLine($"Funder: {@"Grumeti"}");
Console.WriteLine($"Gps_height: {1399F}");
Console.WriteLine($"Installer: {@"GRUMETI"}");
Console.WriteLine($"Longitude: {3.469876E+08F}");
Console.WriteLine($"Latitude: {-2.147466E+08F}");
Console.WriteLine($"Wpt_name: {@"Zahanati"}");
Console.WriteLine($"Num_private: {0F}");
Console.WriteLine($"Basin: {@"Lake Victoria"}");
Console.WriteLine($"Subvillage: {@"Nyamara"}");
Console.WriteLine($"Region: {@"Mara"}");
Console.WriteLine($"Region_code: {20F}");
Console.WriteLine($"District_code: {2F}");
Console.WriteLine($"Lga: {@"Serengeti"}");
Console.WriteLine($"Ward: {@"Natta"}");
Console.WriteLine($"Population: {280F}");
Console.WriteLine($"Recorded_by: {@"GeoData Consultants Ltd"}");
Console.WriteLine($"Scheme_management: {@"Other"}");
Console.WriteLine($"Scheme_name: {@""}");
Console.WriteLine($"Permit: {true}");
Console.WriteLine($"Construction_year: {2010F}");
Console.WriteLine($"Extraction_type: {@"gravity"}");
Console.WriteLine($"Extraction_type_group: {@"gravity"}");
Console.WriteLine($"Extraction_type_class: {@"gravity"}");
Console.WriteLine($"Management: {@"wug"}");
Console.WriteLine($"Management_group: {@"user-group"}");
Console.WriteLine($"Payment: {@"never pay"}");
Console.WriteLine($"Payment_type: {@"never pay"}");
Console.WriteLine($"Water_quality: {@"soft"}");
Console.WriteLine($"Quality_group: {@"good"}");
Console.WriteLine($"Quantity: {@"insufficient"}");
Console.WriteLine($"Quantity_group: {@"insufficient"}");
Console.WriteLine($"Source: {@"rainwater harvesting"}");
Console.WriteLine($"Source_type: {@"rainwater harvesting"}");
Console.WriteLine($"Source_class: {@"surface"}");
Console.WriteLine($"Waterpoint_type: {@"communal standpipe"}");
Console.WriteLine($"Waterpoint_type_group: {@"communal standpipe"}");
Console.WriteLine($"Status_group: {@"functional"}");


Console.WriteLine($"\n\nPredicted Status_group: {predictionResult.PredictedLabel}\n\n");
Console.WriteLine("=============== End of process, hit any key to finish ===============");
Console.ReadKey();

